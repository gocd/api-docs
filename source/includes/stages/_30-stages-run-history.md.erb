## Get stage history

```shell
$ curl 'https://ci.example.com/go/api/stages/mypipeline/defaultStage/history' \
      -u 'username:password' \
      -H 'Accept: <%= data.apis.versions.stage_operations %>'
```

> The above command returns JSON structured like this:

```http
HTTP/1.1 200 OK
Content-Type: <%= data.apis.versions.stage_operations %>; charset=utf-8
```

```json
{
  "_links": {
    "next": {
      "href": "http://ci.example.com/go/api/stages/mypipeline/defaultStage/history?after=38"
    },
    "previous": {
      "href": "http://ci.example.com/go/api/stages/mypipeline/defaultStage/history?before=4"
    }
  },
  "stages": [
    {
      "name": "defaultStage",
      "approved_by": "admin",
      "cancelled_by": "GoCD",
      "jobs": [
        {
          "name": "defaultJob",
          "result": "Cancelled",
          "state": "Completed",
          "scheduled_date": 1436509881002
        }
      ],
      "pipeline_counter": 3,
      "pipeline_name": "mypipeline",
      "result": "Cancelled",
      "approval_type": "success",
      "counter": "1",
      "rerun_of_counter": null
    },
    {
      "name": "defaultStage",
      "approved_by": "admin",
      "cancelled_by": "admin",
      "jobs": [
        {
          "name": "defaultJob",
          "result": "Cancelled",
          "state": "Completed",
          "scheduled_date": 1436509783931
        }
      ],
      "pipeline_counter": 2,
      "pipeline_name": "mypipeline",
      "result": "Cancelled",
      "approval_type": "success",
      "counter": "1",
      "rerun_of_counter": null
    },
    {
      "name": "defaultStage",
      "approved_by": "changes",
      "jobs": [
        {
          "name": "defaultJob",
          "result": "Passed",
          "state": "Completed",
          "scheduled_date": 1436509518752
        }
      ],
      "pipeline_counter": 1,
      "pipeline_name": "mypipeline",
      "result": "Passed",
      "approval_type": "success",
      "counter": "1",
      "rerun_of_counter": null
    }
  ]
}
```

The stage history allows users to list stage instances of specified stage. Supports cursor based pagination. The json output provides the `next` link which needs to be followed for the next set of records (if present). It also provides a `previous` which can be followed to get the previous page (if there is one).

The API supports the following query params:

| Param Name  | Description                                                                 |
| ----------- | --------------------------------------------------------------------------- |
| `page_size` | The number of records per page. Can be between 10 and 100. Defaults to `10` |
| `after`     | The cursor value for fetching the next set of records                       |
| `before`    | The cursor value for fetching the previous set of records                   |

<%= updated_to(2,'20.1.0') %>
<%= available_since('14.3.0') %>


<p class='http-request-heading'>HTTP Request</p>

`GET /go/api/stages/:pipeline_name/:stage_name/history`

<p class='http-request-return-description'>Returns</p>

An array of stage instances.
